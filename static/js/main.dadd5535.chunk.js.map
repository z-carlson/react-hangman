{"version":3,"sources":["../src sync /^/.//circle.*/.svg$","circle0.svg","circle1.svg","circle2.svg","circle3.svg","circle4.svg","circle5.svg","circle6.svg","settings.svg","Counter.js","Word.js","Letter.js","Letters.js","Definition.js","Settings.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Counter","count","theme","imageNum","className","src","require","toString","alt","Word","word","guesses","status","letterList","split","letter","i","includes","Letter","props","handleClick","handleGuess","toLowerCase","setState","buttonState","state","this","onClick","Component","Letters","consonant","key","vowel","Definition","Settings","toggleThemeChange","type","checked","name","value","htmlFor","wordList","definition","partOfSpeech","App","checkGameOver","currentGuesses","push","currentWrong","wrongGuesses","toggleSettingsView","view","getWord","randomWord","Math","floor","random","length","console","log","width","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dadd5535.chunk.js","sourcesContent":["var map = {\n\t\"./circle0.svg\": 16,\n\t\"./circle1.svg\": 17,\n\t\"./circle2.svg\": 18,\n\t\"./circle3.svg\": 19,\n\t\"./circle4.svg\": 20,\n\t\"./circle5.svg\": 21,\n\t\"./circle6.svg\": 22\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 15;","module.exports = __webpack_public_path__ + \"static/media/circle0.db1659e9.svg\";","module.exports = __webpack_public_path__ + \"static/media/circle1.639bdc5c.svg\";","module.exports = __webpack_public_path__ + \"static/media/circle2.2e57b6fb.svg\";","module.exports = __webpack_public_path__ + \"static/media/circle3.9487d856.svg\";","module.exports = __webpack_public_path__ + \"static/media/circle4.003e7d4b.svg\";","module.exports = __webpack_public_path__ + \"static/media/circle5.afa8aec3.svg\";","module.exports = __webpack_public_path__ + \"static/media/circle6.fc1f09fe.svg\";","module.exports = __webpack_public_path__ + \"static/media/settings.8ef73e70.svg\";","import React from 'react';\nimport './Counter.css';\n\n\nconst Counter = ({count, theme}) => {\n  \n\n  let imageNum = count; \n\n  return (\n    <div className={(theme === 'light' ? 'counter-frame-light' : 'counter-frame-dark')}>\n      <div className={(theme === 'light' ? \"counter-frame-inset-light\" : \"counter-frame-inset-dark\")}>\n        <img src={require(`./circle${imageNum.toString()}.svg`)} alt={\"5 guesses left\"} className=\"counter-images\"/>\n      </div>\n    </div>\n  )\n}\n\nexport default Counter","import React from 'react';\nimport './Word.css';\n\nconst Word = ({word, guesses, theme, status, }) => {\n  \n  const letterList = word.split('');\n\n  const done = (arr, target) => target.every(v => arr.includes(v));\n   \n  // if (done(guesses, letterList)) {\n  //   showDefinition();\n  // }\n\n  return (\n    <div className={(theme === 'light' ? 'word-box-light' : 'word-box-dark')} >\n        <h1>{\n\n            (status === 'over' ? word : letterList.map((letter, i) => {            \n            if (guesses.includes(letter)) {\n              return letter\n            } else {\n              return '_';\n            }\n          }))\n\n          \n        }</h1>\n    </div>\n  )\n}\n\nexport default Word","import React, { Component } from 'react';\nimport './Letter.css';\n\n\n\nclass Letter extends Component {\n  constructor(props) {\n    super(props);\n      this.state = {\n        buttonState: (this.props.theme === 'light' ? 'letter-box-light' : 'letter-box-dark'),\n      }      \n  }\n\n  \n  handleClick = () => {\n    this.props.handleGuess(this.props.letter.toLowerCase());\n    this.setState((this.props.theme === 'light' ? {buttonState: 'letter-box-clicked-light'} : {buttonState: 'letter-box-clicked-dark'} ));\n    }\n\n\n  render() {  \n    return (\n      <div className={this.state.buttonState} onClick={() => this.handleClick() } >\n        <h3>{this.props.letter}</h3>\n      </div>\n    )\n  }\n\n}\n\n\n\n\nexport default Letter","import React from 'react';\nimport Letter from './Letter';\nimport './Letters.css'\n\nconst Letters = ({handleGuess, theme, status}) => {\n  const vowels = ['A','E','I','O','U']\n\n  const consonants = ['B','C','D','F','G','H','J',\n                    'K','L','M','N','P','Q','R','S',\n                    'T','V','W','X','Y','Z'\n                    ]\n                 \n\n  return (\n    <div className=\"alphabet-selection\">\n      <div className=\"consonant-rows\">\n      {\n          consonants.map((consonant, i) => {\n            return (\n              <Letter letter={consonant}\n              handleGuess={handleGuess}\n              theme={theme}\n              status={status}\n              key={i}\n              />\n            )\n          })\n        }\n      </div>\n      \n      <div className=\"vowel-row\">\n        {\n          vowels.map((vowel, i) => {\n            return (\n              <Letter \n                letter={vowel}\n                handleGuess={handleGuess}\n                theme={theme}\n                status={status}\n                key={i}\n              />\n            )\n          })\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Letters","import React from 'react';\nimport '/home/zac/Programming/hangman/src/Definition.css';\n\nconst Definition = () => {\n  return (\n    <div id=\"definition-block\">\n      <h4 id=\"part-of-speech\">Noun</h4>\n      <p id=\"definition\">a board consisting of a number of wooden slats joined together, placed so as to form a path over muddy ground or in a trench.</p>\n      <p id='example'>\"he spread a tarpaulin over the duckboards\"</p>\n    </div>\n    \n  )\n}\n\nexport default Definition","import React from 'react';\nimport './Settings.css';\n\n\nconst Settings = ({toggleThemeChange, theme}) => {\n  return (\n    <div className={(theme === 'light' ? 'settings-modal-light' : 'settings-modal-dark')}>\n      <form>\n        <h1>Settings</h1>\n        <div>\n        <h3>Color Theme</h3>\n          <div className=\"color-theme\">\n            <h4>Light mode</h4>\n              <label className=\"theme-switch\">\n                <input type=\"checkbox\" onClick={toggleThemeChange} checked={(theme === 'light' ? false : true)}/>\n                <span className=\"slider round\" ></span>\n              </label>\n            <h4>Dark mode</h4>\n          </div>\n        </div>\n        <div className=\"difficulty-select\">\n          <h3>Difficulty</h3>\n          <div>\n            <input type=\"radio\" id=\"easy\" name=\"difficulty\" value=\"1\" />\n            <label htmlFor=\"easy\">I'm too young to die</label> \n          </div>\n          <div>\n            <input type=\"radio\" id=\"normal\" name=\"difficulty\" value=\"2\" />\n            <label htmlFor=\"normal\" checked >Hurt me plenty</label>\n          </div>\n          <div>\n            <input type=\"radio\" id=\"hard\" name=\"difficulty\" value=\"3\" />\n            <label htmlFor=\"hard\">Ultra-violence</label>\n          </div>\n          <div>\n            <input type=\"radio\" id=\"very-hard\" name=\"difficulty\" value=\"4\" />\n            <label htmlFor=\"very-hard\">Nightmare</label>\n          </div>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nexport default Settings","import React, { Component } from 'react';\nimport './App.css';\nimport Counter from './Counter';\nimport Word from './Word';\nimport Letters from './Letters';\nimport Definition from './Definition';\nimport Settings from './Settings';\nimport secrets from './secrets.js';\n\nconst wordList = [\n  {\n    word: 'cake',\n    definition: 'A rich, sweet dessert food, typically made of flour, sugar and eggs and baked in an oven, and often covered in icing.',\n    partOfSpeech: 'noun'\n  },\n  {\n    word: 'beautiful',\n    definition: 'Attractive and possessing beauty.',\n    partOfSpeech: 'Adjective'\n  },\n  {\n    word: 'candle',\n    definition: 'A light source consisting of a wick embedded in a solid, flammable substance such as wax, tallow, or paraffin.',\n    partOfSpeech: 'noun'\n  },\n]\n\n\n// const initialState = {\n//     view: \"game\",\n//     status: '',\n//     word: 'duckboard',\n//     guesses: [],\n//     wrongGuesses: 0,\n//     }\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n      this.state = {\n        view: \"game\",\n        status: '',\n        word: 'duckboard',\n        guesses: [],\n        wrongGuesses: 0,\n        theme: 'light'\n        };\n  }\n\n  checkGameOver = (guesses) => {\n    if (guesses === 6 ) {\n      this.setState({status: 'over'});\n    }\n  }\n\n  handleGuess = (letter) => {\n    let currentGuesses = this.state.guesses;\n    currentGuesses.push(letter)\n    \n    const currentWrong = (this.state.word.includes(letter)) \n      ? this.state.wrongGuesses\n      : this.state.wrongGuesses + 1;\n               \n    this.setState({guesses: currentGuesses});\n\n    this.checkGameOver(currentWrong);\n\n    if (currentWrong < 7) {\n      this.setState({wrongGuesses: currentWrong});\n    }\n  }\n  \n  toggleSettingsView = () => {\n    const currentView = this.state.view;\n\n    if (currentView === \"game\") {\n      this.setState({view: 'settings'});\n    } else {\n      this.setState({view: 'game'});\n    }\n  }\n\n  toggleThemeChange = () => {\n    if (this.state.theme === 'light') {\n      this.setState({theme: 'dark'})\n    } else {\n      this.setState({theme: 'light'})\n    }\n  }\n\n  // showDefinition = () => {\n  //   this.setState({status: 'over'})\n  // }\n\n  getWord = () => {\n\n    let randomWord = wordList[Math.floor(Math.random() * wordList.length)];\n    console.log(randomWord);\n\n    this.setState({\n        view: \"game\",\n        status: '',\n        word: randomWord.word,\n        guesses: [],\n        wrongGuesses: 0,\n        });\n\n    // var myHeaders = new Headers();\n    //   myHeaders.append(\"app_id\", '2bb3169f');\n    //   myHeaders.append(\"app_key\", '0acde3d5d9d3e414fb57d32777748abd');\n\n    // var requestOptions = {\n    //   method: 'GET',\n    //   headers: myHeaders,\n    //   mode: 'no-cors',\n    //   redirect: 'follow'\n    // };\n\n    // fetch(\"https://od-api.oxforddictionaries.com/api/v2/entries/en-us/example\", {\n    //   method: 'GET',\n    //   headers: {\n    //     \"app_id\": \"2bb3169f\",\n    //     \"app_key\": \"0acde3d5d9d3e414fb57d32777748abd\"\n    //   },\n    //   mode: 'no-cors',\n    // })\n    //   .then(response => response.text())\n    //   .then(result => console.log(result))\n    //   .catch(error => console.log('error', error));\n    // }\n  }\n\n  render() {\n    return (\n        <div className={(this.state.theme === 'light' ? 'light-mode': 'dark-mode')} >\n          <nav>\n            <h1>React Hangman</h1>\n            <div onClick={this.toggleSettingsView}>\n              <img id={(this.state.theme === 'light' ? 'settings-icon-light' : 'settings-icon-dark')} \n                    src={require(\"./settings.svg\")} \n                    alt={\"settings\"} \n                    width={\"40px;\"}/> </div>\n          </nav>\n            { \n              this.state.view === 'game'\n                ? <div>                 \n                  <main className=\"container\">\n                    <Counter theme={this.state.theme} count={this.state.wrongGuesses} />\n                    <Word \n                      theme={this.state.theme} \n                      word={this.state.word} \n                      status={this.state.status} \n                      guesses={this.state.guesses}\n                      // showDefinition={this.showDefinition} \n                      />\n                    {this.state.status === 'over' \n                     ? <Definition />\n                     : <p></p> \n                    }               \n                    <Letters theme={this.state.theme} status={this.state.status} handleGuess={this.handleGuess} />\n                  </main>\n                  <footer>\n                    <button onClick={this.getWord} >New Word</button>\n                  </footer>\n                  </div>\n                : <div>\n                    <Settings theme={this.state.theme} toggleThemeChange={this.toggleThemeChange} />\n                  </div>\n            } \n        </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}